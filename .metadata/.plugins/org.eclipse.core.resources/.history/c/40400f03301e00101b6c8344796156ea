package ma.isga.depot.api;

import java.util.List;
import java.util.Optional;

import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import io.swagger.v3.oas.annotations.parameters.RequestBody;
import ma.isga.depot.entities.Membre;
import ma.isga.depot.service.IGroupeService;
import ma.isga.depot.service.IMembreService;
import ma.isga.depot.service.IUsagerService;

@RestController
@RequestMapping("/membres")

public class MembreController {

    private  IMembreService membreService;
    private  IUsagerService usagerService;
    private  IGroupeService groupeService;
    

    
    public MembreController(IMembreService membreService, IUsagerService usagerService, IGroupeService groupeService) {
		this.membreService = membreService;
		this.usagerService = usagerService;
		this.groupeService = groupeService;
	}

	@GetMapping
    public List<Membre> getAllMembres() {
        return membreService.getAllMembres();
    }

    @GetMapping("/{id}")
    public Optional<Membre> getMembreById(@PathVariable Long id) {
        return membreService.getMembreById(id);
        }

    @GetMapping("/usager/{usagerId}")
    public ResponseEntity<List<Membre>> getMembresByUsager(@PathVariable Long usagerId) {
        return usagerService.getUsagerById(usagerId)
                .map(usager -> ResponseEntity.ok(membreService.getMembresByUsager(usager)))
                .orElse(ResponseEntity.notFound().build());
    }

    @GetMapping("/groupe/{groupeId}")
    public ResponseEntity<List<Membre>> getMembresByGroupe(@PathVariable Long groupeId) {
        return groupeService.getGroupe(groupeId)
                .map(groupe -> ResponseEntity.ok(membreService.getMembresByGroupe(groupe)))
                .orElse(ResponseEntity.notFound().build());
    }

    @PostMapping
    public ResponseEntity<Membre> createMembre(@RequestBody Membre membre) {
        return ResponseEntity.status(HttpStatus.CREATED)
                .body(membreService.saveMembre(membre));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteMembre(@PathVariable Long id) {
        membreService.deleteMembre(id);
        return ResponseEntity.noContent().build();
    }
	
}
